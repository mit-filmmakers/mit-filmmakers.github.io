{"version":3,"file":"component---src-pages-people-tsx-72877af62a7eab9b2462.js","mappings":"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","sources":["webpack://mit-filmmakers/./src/pages/people.tsx"],"sourcesContent":["import * as React from \"react\";\nimport \"../styles/index.scss\";\nimport { ReactElement } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\nimport { graphql, PageProps } from \"gatsby\";\n\ninterface PersonProps {\n  name: string,\n  email: string,\n  affiliation: string,\n  major: string,\n  category: string,\n  photo: ReactElement\n}\n\nconst Person = ( {name, email, affiliation, major, photo}: PersonProps ) => <div key={name} className=\"card\" style={{margin: \"1rem\", padding: 0, overflow: \"hidden\", position: \"relative\", zIndex: 0}}>\n<div className=\"card-image\" style={{width: \"250px\", height: \"250px\", padding: 0}}>\n  {photo}\n</div>\n<div className=\"card-content\" style={{width: \"250px\", height: \"150px\", padding: \"1.5rem\"}}>\n  <div className=\"media\">\n    <div className=\"media-content\">\n      <p className=\"title is-4\">{name}</p>\n      <p className=\"subtitle is-6\"><a href={\"mailto:\" + email}>{email}</a></p>\n      <p>{affiliation}, {major}</p>\n    </div>\n  </div>\n</div>\n</div>\n\nconst Introduction = () => <section className=\"section\">\n<article className=\"container content is-max-desktop\">\n  <h1>\n    People\n  </h1>\n  <p>\n    Placeholder text\n  </p>\n</article>\n</section>\n\nconst Group = ({ category, nodes }: { category: string, nodes: PersonProps[] }) => <section className=\"section\">\n  <article className=\"container content is-max-desktop\">\n    <h2>\n      { category }\n    </h2>\n    <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\", padding: 0}}>\n      {nodes.map(x => <Person {...x}/>)}\n    </div>\n  </article>\n</section>\n\nconst People = ({ data }: PageProps<Queries.PeopleQuery>) => {\n  const nodes: PersonProps[] = data.notionDatabase?.childrenNotionPage?.map(page => {\n    const { title, properties, image } = page || {};\n    const imageData = image?.childImageSharp?.gatsbyImageData;\n    const photo = imageData ? <GatsbyImage image={imageData} alt={title || \"\"}/> : <StaticImage src={\"../images/mitao.jpg\"} alt=\"fallback\" />\n    return {\n      name: title || \"\",\n      email: properties?.EDU_Email || \"\",\n      affiliation: properties?.Affiliation || \"\",\n      major: properties?.Major || \"\",\n      category: properties?.Category || \"\",\n      photo: photo }\n  }) || [];\n  nodes.sort((a, b) => a.name.localeCompare(b.name));\n  const officers = nodes.filter(({ category }) => category == 'Officer');\n  const members = nodes.filter(({ category }) => category == 'Member');\n  const alumni = nodes.filter(({ category }) => category == 'Alumni');\n  return (\n    <Layout slug=\"people\">\n      <Introduction />\n      <Group category={'Officers'} nodes={officers}/>\n      <Group category={'Members'} nodes={members}/>\n      <Group category={'Alumni'} nodes={alumni}/>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\nquery People {\n  notionDatabase(title: {eq: \"People\"}) {\n    childrenNotionPage {\n      title\n      image {\n        childImageSharp {\n          gatsbyImageData(width: 250, height: 250, placeholder: BLURRED, formats: [AUTO, WEBP])\n        }\n      }\n      properties {\n        Affiliation\n        Category\n        EDU_Email\n        Major\n      }\n    }\n  }\n}\n`\n\nexport default People\n"],"names":["Person","name","email","affiliation","major","photo","React","key","className","style","margin","padding","overflow","position","zIndex","width","height","href","Introduction","Group","category","nodes","display","flexWrap","justifyContent","map","x","data","notionDatabase","childrenNotionPage","page","title","properties","image","imageData","childImageSharp","_image$childImageShar","gatsbyImageData","GatsbyImage","alt","StaticImage","src","EDU_Email","Affiliation","Major","Category","sort","a","b","localeCompare","officers","filter","members","alumni","Layout","slug"],"sourceRoot":""}