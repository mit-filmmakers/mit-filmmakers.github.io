{"version":3,"file":"component---src-pages-portfolio-tsx-e5504cbef88424584763.js","mappings":"8JAMMA,EAAe,kBAAMC,EAAAA,cAAAA,UAAAA,CAASC,UAAU,WAC5CD,EAAAA,cAAAA,UAAAA,CAASC,UAAU,oCACjBD,EAAAA,cAAAA,KAAAA,KAAAA,aAGAA,EAAAA,cAAAA,IAAAA,KAAAA,uBAaEE,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,IAAKC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAb,OAAuCL,EAAAA,cAAAA,UAAAA,CAASC,UAAU,mCAAmCK,IAAKH,GAC7GH,EAAAA,cAAAA,KAAAA,KAAKI,GACLJ,EAAAA,cAAAA,IAAAA,KAAAA,iBAAkBO,EAAAA,EAAAA,IAAWF,IAC7BL,EAAAA,cAAAA,MAAAA,CAAKQ,MAAO,CAACC,SAAU,WAAYC,QAAS,YAC1CV,EAAAA,cAAAA,SAAAA,CAAQQ,MAAO,CAACC,SAAU,WAAYE,MAAO,OAAQC,OAAQ,OAAQC,KAAM,IAAKC,IAAK,KAAMC,IAAKZ,EAAKa,MAAM,uBAAuBC,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,OAKhQC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAuCrB,EAAAA,cAAAA,UAAAA,CAASC,UAAU,WACvEoB,EAAMC,IAAIpB,KA2Cb,UAxCkB,SAAC,GAAiD,IAAD,IAA9CqB,EAA8C,EAA9CA,KACbF,EAAqB,GAc3B,OAbA,UAAAE,EAAKC,sBAAL,mBAAqBC,0BAArB,SAAyCH,KAAI,SAAAI,GAC3C,GAAIA,GAAQA,EAAKV,OAASU,EAAKC,WAAY,CACzC,MAA6CD,EAAKC,WAA1CC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,UAC3BF,GAAYC,GAAeC,GAAaA,EAAUC,OACtDV,EAAMW,KAAK,CACT5B,KAAMsB,EAAKV,MACXiB,SAAUL,EACVzB,IAAK0B,EACLxB,UAAW,IAAI6B,KAAKJ,EAAUC,aAIpCV,EAAMc,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEhC,UAAUiC,UAAYF,EAAE/B,UAAUiC,aAEvDtC,EAAAA,cAACuC,EAAAA,EAAD,CAAQC,KAAK,aACXxC,EAAAA,cAACD,EAAD,MACAC,EAAAA,cAACoB,EAAD,CAASC,MAAOA","sources":["webpack://mit-filmmakers/./src/pages/portfolio.tsx"],"sourcesContent":["import * as React from \"react\";\nimport \"../styles/index.scss\";\nimport Layout from \"../components/Layout\";\nimport { graphql, PageProps } from \"gatsby\";\nimport { formatDate } from \"../utils/metadata\";\n\nconst Introduction = () => <section className=\"section\">\n  <article className=\"container content is-max-desktop\">\n    <h1>\n      Portfolio\n    </h1>\n    <p>\n      Placeholder text\n    </p>\n  </article>\n</section>\n\ninterface FilmProps {\n  name: string,\n  category: string,\n  url: string,\n  premiered: Date,\n}\n\nconst Film = ({url, name, premiered}: FilmProps) => <article className=\"container content is-max-desktop\" key={url}>\n  <h2>{name}</h2>\n  <p>Premiered on { formatDate(premiered) }</p>\n  <div style={{position: \"relative\", padding: \"30% 45%\"}}>\n    <iframe style={{position: \"absolute\", width: \"100%\", height: \"100%\", left: \"0\", top: \"0\"}} src={url} title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen>\n    </iframe>\n  </div>\n</article>\n\nconst Display = ({ nodes }: { nodes: FilmProps[] }) => <section className=\"section\">\n  {nodes.map(Film)}\n</section>\n\nconst Portfolio = ({ data }: PageProps<Queries.PortfolioQuery>) => {\n  const nodes: FilmProps[] = [];\n  data.notionDatabase?.childrenNotionPage?.map(page => {\n    if (page && page.title && page.properties) {\n      const { Category, YouTube_URL, Premiered } = page.properties;\n      if (Category && YouTube_URL && Premiered && Premiered.start)\n      nodes.push({\n        name: page.title,\n        category: Category,\n        url: YouTube_URL,\n        premiered: new Date(Premiered.start)\n      })\n    }\n  });\n  nodes.sort((a, b) => b.premiered.getTime() - a.premiered.getTime())\n  return (\n    <Layout slug=\"portfolio\">\n      <Introduction />\n      <Display nodes={nodes}/>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\nquery Portfolio {\n  notionDatabase(title: {eq: \"Portfolio\"}) {\n    childrenNotionPage {\n      title\n      properties {\n        Category\n        YouTube_URL\n        Premiered {\n          start\n        }\n      }\n    }\n  }\n}\n`\n\nexport default Portfolio\n"],"names":["Introduction","React","className","Film","url","name","premiered","key","formatDate","style","position","padding","width","height","left","top","src","title","frameBorder","allow","allowFullScreen","Display","nodes","map","data","notionDatabase","childrenNotionPage","page","properties","Category","YouTube_URL","Premiered","start","push","category","Date","sort","a","b","getTime","Layout","slug"],"sourceRoot":""}