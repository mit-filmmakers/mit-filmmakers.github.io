{"version":3,"file":"component---src-pages-events-tsx-a9e6ba3db9fded88a467.js","mappings":"8JAgBMA,EAAe,kBAAMC,EAAAA,cAAAA,UAAAA,CAASC,UAAU,WAC9CD,EAAAA,cAAAA,UAAAA,CAASC,UAAU,oCACjBD,EAAAA,cAAAA,KAAAA,KAAAA,UAGAA,EAAAA,cAAAA,IAAAA,KAAAA,kBAMIE,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OAAwDP,EAAAA,cAAAA,UAAAA,CAASC,UAAU,WACzFD,EAAAA,cAAAA,UAAAA,CAASC,UAAU,oCACjBD,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACQ,EAAAA,KAAD,CAAMC,GAAE,WAAaN,GACjBC,IAGNJ,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,yBAA0BI,IAE5CL,EAAAA,cAAAA,IAAAA,KACIM,EADJ,MACeC,MA4CjB,UAvCe,SAAC,GAA8C,IAAD,IACrDG,GAAsB,UAD+B,EAA3CC,KACiBC,sBAAL,mBAAqBC,0BAArB,eAAyCC,KAAI,SAACC,GAAW,IAAD,EAClF,EAA8BA,GAAS,GAA/BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACf,MAAO,CACLb,KAAMY,GAAS,GACfb,IAAIc,aAAAA,EAAAA,EAAYC,KAAM,GACtBb,UAAUY,aAAAA,EAAAA,EAAYE,WAAY,GAClCb,MAAMW,SAAA,QAAAA,EAAAA,EAAYG,YAAZ,WAAAH,EAAA,EAAkBI,QAAS,gBACjCd,UAAUU,aAAAA,EAAAA,EAAYK,WAAY,SAChC,GAEN,OADAZ,EAAMa,MAAK,SAACC,EAAGC,GAAJ,OAAW,IAAIL,KAAKI,EAAElB,MAAOoB,UAAa,IAAIN,KAAKK,EAAEnB,MAAOoB,aAErE1B,EAAAA,cAAC2B,EAAAA,EAAD,CAAQC,KAAK,UACX5B,EAAAA,cAAAA,OAAAA,KACEA,EAAAA,cAACD,EAAD,MACCW,EAAMI,IAAIZ","sources":["webpack://mit-filmmakers/./src/pages/events.tsx"],"sourcesContent":["import \"../styles/index.scss\"\nimport * as React from \"react\"\nimport { ReactElement } from \"react\"\nimport Layout from \"../components/Layout\"\nimport { GatsbyImage, GatsbyImageProps, IGatsbyImageData, StaticImage } from \"gatsby-plugin-image\"\nimport { graphql, PageProps } from \"gatsby\"\nimport { Link } from \"gatsby\"\n\ninterface EventProps {\n  id: string,\n  name: string,\n  category: string,\n  date: string,\n  location: string,\n}\n\nconst Introduction = () => <section className=\"section\">\n<article className=\"container content is-max-desktop\">\n  <h1>\n    Events\n  </h1>\n  <p>\n    Placeholder\n  </p>\n</article>\n</section>\n\nconst Event = ({ id, name, category, date, location }: EventProps) => <section className=\"section\">\n<article className=\"container content is-max-desktop\">\n  <h2>\n    <Link to={`/events/${id}`}>\n      { name }\n    </Link>\n  </h2>\n  <div>\n    <span className=\"tag is-medium is-info\">{ category }</span>\n  </div>\n  <p>\n    { date } @ { location }\n  </p>\n</article>\n</section>\n\nconst Events = ({ data }: PageProps<Queries.EventsQuery>) => {\n  const nodes: EventProps[] = data.notionDatabase?.childrenNotionPage?.map((event) => {\n    const { title, properties } = event || {};\n    return {\n      name: title || \"\",\n      id: properties?.ID || \"\",\n      category: properties?.Category || \"\",\n      date: properties?.Date?.start || \"July 01, 1921\",\n      location: properties?.Location || \"\"}\n  }) || [];\n  nodes.sort((a, b) => (new Date(a.date)).getTime() - (new Date(b.date)).getTime());\n  return (\n    <Layout slug=\"events\">\n      <main>\n        <Introduction />\n        {nodes.map(Event)}\n      </main>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query Events {\n    notionDatabase(title: {eq: \"Events\"}){\n      childrenNotionPage{\n        title\n        properties {\n          ID\n          Category\n          Date {\n            start(formatString: \"MMMM DD, YYYY\")\n          }\n          Location\n        }\n      }\n    }\n  }\n`\n\nexport default Events\n"],"names":["Introduction","React","className","Event","id","name","category","date","location","Link","to","nodes","data","notionDatabase","childrenNotionPage","map","event","title","properties","ID","Category","Date","start","Location","sort","a","b","getTime","Layout","slug"],"sourceRoot":""}